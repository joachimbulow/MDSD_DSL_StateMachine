/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.serializer;

import com.google.inject.Inject;
import dk.sdu.mmmi.mdsd.math.Add;
import dk.sdu.mmmi.mdsd.math.Divide;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.Multiply;
import dk.sdu.mmmi.mdsd.math.Subtract;
import dk.sdu.mmmi.mdsd.math.Variables;
import dk.sdu.mmmi.mdsd.math.num;
import dk.sdu.mmmi.mdsd.math.varUse;
import dk.sdu.mmmi.mdsd.math.variableInit;
import dk.sdu.mmmi.mdsd.services.MathGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MathSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathPackage.ADD:
				sequence_Exp(context, (Add) semanticObject); 
				return; 
			case MathPackage.DIVIDE:
				sequence_Factor(context, (Divide) semanticObject); 
				return; 
			case MathPackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathPackage.MULTIPLY:
				sequence_Factor(context, (Multiply) semanticObject); 
				return; 
			case MathPackage.SUBTRACT:
				sequence_Exp(context, (Subtract) semanticObject); 
				return; 
			case MathPackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			case MathPackage.NUM:
				sequence_Number(context, (num) semanticObject); 
				return; 
			case MathPackage.VAR_USE:
				sequence_VariableUse(context, (varUse) semanticObject); 
				return; 
			case MathPackage.VARIABLE_INIT:
				sequence_VariableInit(context, (variableInit) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Exp returns Add
	 *     Exp.Add_1_0_0_0 returns Add
	 *     Exp.Subtract_1_0_1_0 returns Add
	 *     Factor returns Add
	 *     Factor.Multiply_1_0_0_0 returns Add
	 *     Factor.Divide_1_0_1_0 returns Add
	 *     Primary returns Add
	 *     Parenthesis returns Add
	 *
	 * Constraint:
	 *     (left=Exp_Add_1_0_0_0 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Add semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ADD__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ADD__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ADD__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ADD__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getAddLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Subtract
	 *     Exp.Add_1_0_0_0 returns Subtract
	 *     Exp.Subtract_1_0_1_0 returns Subtract
	 *     Factor returns Subtract
	 *     Factor.Multiply_1_0_0_0 returns Subtract
	 *     Factor.Divide_1_0_1_0 returns Subtract
	 *     Primary returns Subtract
	 *     Parenthesis returns Subtract
	 *
	 * Constraint:
	 *     (left=Exp_Subtract_1_0_1_0 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Subtract semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.SUBTRACT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.SUBTRACT__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.SUBTRACT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.SUBTRACT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getSubtractLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Divide
	 *     Exp.Add_1_0_0_0 returns Divide
	 *     Exp.Subtract_1_0_1_0 returns Divide
	 *     Factor returns Divide
	 *     Factor.Multiply_1_0_0_0 returns Divide
	 *     Factor.Divide_1_0_1_0 returns Divide
	 *     Primary returns Divide
	 *     Parenthesis returns Divide
	 *
	 * Constraint:
	 *     (left=Factor_Divide_1_0_1_0 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Divide semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.DIVIDE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.DIVIDE__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.DIVIDE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.DIVIDE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getDivideLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Multiply
	 *     Exp.Add_1_0_0_0 returns Multiply
	 *     Exp.Subtract_1_0_1_0 returns Multiply
	 *     Factor returns Multiply
	 *     Factor.Multiply_1_0_0_0 returns Multiply
	 *     Factor.Divide_1_0_1_0 returns Multiply
	 *     Primary returns Multiply
	 *     Parenthesis returns Multiply
	 *
	 * Constraint:
	 *     (left=Factor_Multiply_1_0_0_0 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Multiply semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MULTIPLY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MULTIPLY__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MULTIPLY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MULTIPLY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getMultiplyLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     (name=ID exp=Exp)
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MATH_EXP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MATH_EXP__NAME));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_3_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns num
	 *     Exp.Add_1_0_0_0 returns num
	 *     Exp.Subtract_1_0_1_0 returns num
	 *     Factor returns num
	 *     Factor.Multiply_1_0_0_0 returns num
	 *     Factor.Divide_1_0_1_0 returns num
	 *     Primary returns num
	 *     Parenthesis returns num
	 *     Number returns num
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, num semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.NUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.NUM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns variableInit
	 *     Exp.Add_1_0_0_0 returns variableInit
	 *     Exp.Subtract_1_0_1_0 returns variableInit
	 *     Factor returns variableInit
	 *     Factor.Multiply_1_0_0_0 returns variableInit
	 *     Factor.Divide_1_0_1_0 returns variableInit
	 *     Primary returns variableInit
	 *     Parenthesis returns variableInit
	 *     VariableInit returns variableInit
	 *
	 * Constraint:
	 *     (name=ID init=Exp statement=Exp)
	 */
	protected void sequence_VariableInit(ISerializationContext context, variableInit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VARIABLE_INIT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VARIABLE_INIT__NAME));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VARIABLE_INIT__INIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VARIABLE_INIT__INIT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VARIABLE_INIT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VARIABLE_INIT__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableInitAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableInitAccess().getInitExpParserRuleCall_4_0(), semanticObject.getInit());
		feeder.accept(grammarAccess.getVariableInitAccess().getStatementExpParserRuleCall_6_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns varUse
	 *     Exp.Add_1_0_0_0 returns varUse
	 *     Exp.Subtract_1_0_1_0 returns varUse
	 *     Factor returns varUse
	 *     Factor.Multiply_1_0_0_0 returns varUse
	 *     Factor.Divide_1_0_1_0 returns varUse
	 *     Primary returns varUse
	 *     Parenthesis returns varUse
	 *     VariableUse returns varUse
	 *
	 * Constraint:
	 *     (inExp=[MathExp|ID] inVariableInit=[variableInit|ID])
	 */
	protected void sequence_VariableUse(ISerializationContext context, varUse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VAR_USE__IN_EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VAR_USE__IN_EXP));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VAR_USE__IN_VARIABLE_INIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VAR_USE__IN_VARIABLE_INIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableUseAccess().getInExpMathExpIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MathPackage.Literals.VAR_USE__IN_EXP, false));
		feeder.accept(grammarAccess.getVariableUseAccess().getInVariableInitVariableInitIDTerminalRuleCall_2_0_1(), semanticObject.eGet(MathPackage.Literals.VAR_USE__IN_VARIABLE_INIT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     variables+=MathExp+
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
