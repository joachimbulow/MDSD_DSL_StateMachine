/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.Variables;
import dk.sdu.mmmi.mdsd.math.varUse;
import dk.sdu.mmmi.mdsd.math.variableInit;
import java.util.Collections;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _matched = false;
    if (context instanceof varUse) {
      _matched=true;
      final MathExp currentExp = EcoreUtil2.<MathExp>getContainerOfType(context, MathExp.class);
      final EList<MathExp> variables = EcoreUtil2.<Variables>getContainerOfType(context, Variables.class).getVariables();
      final Function1<MathExp, Boolean> _function = (MathExp math) -> {
        String _name = math.getName();
        String _name_1 = currentExp.getName();
        return Boolean.valueOf((!Objects.equal(_name, _name_1)));
      };
      final Iterable<MathExp> filteredVariables = IterableExtensions.<MathExp>filter(variables, _function);
      final IScope letScope = this.getOuterMostLetScope(((Expression)context));
      return Scopes.scopeFor(filteredVariables, letScope);
    }
    return super.getScope(context, reference);
  }
  
  public IScope getOuterMostLetScope(final Expression variable) {
    final variableInit parent = EcoreUtil2.<variableInit>getContainerOfType(variable, variableInit.class);
    if (((parent != null) && (!Objects.equal(variable, parent)))) {
      return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(parent)), this.getOuterMostLetScope(parent));
    }
    return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(variable)));
  }
}
